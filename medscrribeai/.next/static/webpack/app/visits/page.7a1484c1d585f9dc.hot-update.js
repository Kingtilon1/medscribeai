"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/visits/page",{

/***/ "(app-pages-browser)/./src/app/api/documentation/route.js":
/*!********************************************!*\
  !*** ./src/app/api/documentation/route.js ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchActiveVisits: () => (/* binding */ fetchActiveVisits),\n/* harmony export */   fetchPatients: () => (/* binding */ fetchPatients),\n/* harmony export */   fetchVisit: () => (/* binding */ fetchVisit)\n/* harmony export */ });\nconst API_BASE_URL = 'http://localhost:8000/api';\nasync function fetchPatients() {\n    const timestamp = Date.now();\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/patients?t=\").concat(timestamp));\n    if (!response.ok) {\n        console.log('couildnt get patients');\n        throw new Error(\"Failed to fetch patients: \".concat(response.statusText));\n    }\n    const data = await response.json();\n    return data.patients;\n}\nasync function fetchActiveVisits(providerId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/providers/\").concat(providerId, \"/visits\"));\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch visits: \".concat(response.statusText));\n    }\n    return await response.json();\n}\nasync function fetchVisit(visitId) {\n    const response = await fetch(\"\".concat(API_BASE_URL, \"/visits/\").concat(visitId));\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch visit: \".concat(response.statusText));\n    }\n    return await response.json();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvYXBpL2RvY3VtZW50YXRpb24vcm91dGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsZUFBZTtBQUVkLGVBQWVDO0lBQ3BCLE1BQU1DLFlBQVlDLEtBQUtDLEdBQUc7SUFDMUIsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLEdBQThCSixPQUEzQkYsY0FBYSxnQkFBd0IsT0FBVkU7SUFDM0QsSUFBSSxDQUFDRyxTQUFTRSxFQUFFLEVBQUU7UUFDaEJDLFFBQVFDLEdBQUcsQ0FBQztRQUNaLE1BQU0sSUFBSUMsTUFBTSw2QkFBaUQsT0FBcEJMLFNBQVNNLFVBQVU7SUFDbEU7SUFDQSxNQUFNQyxPQUFTLE1BQU1QLFNBQVNRLElBQUk7SUFDbEMsT0FBT0QsS0FBS0UsUUFBUTtBQUN0QjtBQUVPLGVBQWVDLGtCQUFrQkMsVUFBVTtJQUNoRCxNQUFNWCxXQUFXLE1BQU1DLE1BQU0sR0FBNkJVLE9BQTFCaEIsY0FBYSxlQUF3QixPQUFYZ0IsWUFBVztJQUNyRSxJQUFJLENBQUNYLFNBQVNFLEVBQUUsRUFBRTtRQUNoQixNQUFNLElBQUlHLE1BQU0sMkJBQStDLE9BQXBCTCxTQUFTTSxVQUFVO0lBQ2hFO0lBQ0EsT0FBTyxNQUFNTixTQUFTUSxJQUFJO0FBQzVCO0FBRU8sZUFBZUksV0FBV0MsT0FBTztJQUN0QyxNQUFNYixXQUFXLE1BQU1DLE1BQU0sR0FBMEJZLE9BQXZCbEIsY0FBYSxZQUFrQixPQUFSa0I7SUFDdkQsSUFBSSxDQUFDYixTQUFTRSxFQUFFLEVBQUU7UUFDaEIsTUFBTSxJQUFJRyxNQUFNLDBCQUE4QyxPQUFwQkwsU0FBU00sVUFBVTtJQUMvRDtJQUNBLE9BQU8sTUFBTU4sU0FBU1EsSUFBSTtBQUM1QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxib2JidFxcRG93bmxvYWRzXFxoZWFsdGhhaVxcbWVkc2NycmliZWFpXFxzcmNcXGFwcFxcYXBpXFxkb2N1bWVudGF0aW9uXFxyb3V0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBUElfQkFTRV9VUkwgPSAnaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwaSc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hQYXRpZW50cygpIHtcclxuICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9wYXRpZW50cz90PSR7dGltZXN0YW1wfWApO1xyXG4gIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgIGNvbnNvbGUubG9nKCdjb3VpbGRudCBnZXQgcGF0aWVudHMnKVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggcGF0aWVudHM6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcclxuICB9XHJcbiAgY29uc3QgZGF0YSAgPSAgYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gIHJldHVybiBkYXRhLnBhdGllbnRzO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hBY3RpdmVWaXNpdHMocHJvdmlkZXJJZCkge1xyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9wcm92aWRlcnMvJHtwcm92aWRlcklkfS92aXNpdHNgKTtcclxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCB2aXNpdHM6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcclxuICB9XHJcbiAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoVmlzaXQodmlzaXRJZCkge1xyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS92aXNpdHMvJHt2aXNpdElkfWApO1xyXG4gIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIHZpc2l0OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XHJcbiAgfVxyXG4gIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbn1cclxuXHJcbiJdLCJuYW1lcyI6WyJBUElfQkFTRV9VUkwiLCJmZXRjaFBhdGllbnRzIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsImNvbnNvbGUiLCJsb2ciLCJFcnJvciIsInN0YXR1c1RleHQiLCJkYXRhIiwianNvbiIsInBhdGllbnRzIiwiZmV0Y2hBY3RpdmVWaXNpdHMiLCJwcm92aWRlcklkIiwiZmV0Y2hWaXNpdCIsInZpc2l0SWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/api/documentation/route.js\n"));

/***/ })

});